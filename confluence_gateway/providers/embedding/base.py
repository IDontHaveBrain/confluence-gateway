from abc import ABC, abstractmethod
from typing import TYPE_CHECKING

from confluence_gateway.core.exceptions import ConfluenceGatewayError

# Use TYPE_CHECKING to avoid circular imports during runtime
# but allow type hints for static analysis
if TYPE_CHECKING:
    from confluence_gateway.core.config import EmbeddingConfig


class EmbeddingProviderError(ConfluenceGatewayError):
    """Base exception for errors originating from embedding providers."""

    pass


class EmbeddingProvider(ABC):
    """
    Abstract Base Class for embedding providers.

    Defines the common interface for different embedding generation strategies
    (e.g., using local sentence-transformers or external APIs via LiteLLM).
    """

    @abstractmethod
    def __init__(self, config: "EmbeddingConfig") -> None:
        """
        Initialize the provider with its specific configuration.

        Args:
            config: The EmbeddingConfig object containing settings for this provider.
        """
        self.config = config
        pass

    @abstractmethod
    def initialize(self) -> None:
        """
        Perform any necessary setup for the provider.

        This could include loading models, establishing connections,
        or validating credentials/configurations.

        Raises:
            EmbeddingProviderError: If initialization fails.
        """
        pass

    @abstractmethod
    def embed_text(self, text: str) -> list[float]:
        """
        Generate an embedding for a single piece of text.

        Args:
            text: The input text string.

        Returns:
            A list of floats representing the embedding vector.

        Raises:
            EmbeddingProviderError: If embedding generation fails.
        """
        pass

    @abstractmethod
    def embed_texts(self, texts: list[str]) -> list[list[float]]:
        """
        Generate embeddings for a batch of texts.

        Args:
            texts: A list of input text strings.

        Returns:
            A list of lists of floats, where each inner list is an embedding vector.

        Raises:
            EmbeddingProviderError: If batch embedding generation fails.
        """
        pass

    @abstractmethod
    def get_dimension(self) -> int:
        """
        Return the expected dimension of the embeddings generated by this provider.

        Returns:
            The embedding dimension as an integer.

        Raises:
            EmbeddingProviderError: If the dimension cannot be determined (e.g., not initialized).
        """
        pass

    @abstractmethod
    def close(self) -> None:
        """
        Clean up any resources used by the provider.

        This could include releasing models from memory or closing connections.
        May be a no-op for some providers.
        """
        pass
